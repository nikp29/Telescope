{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedBlock = createAnimatedBlock;\nexports.adapt = adapt;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"./InternalAnimatedValue\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AnimatedBlock = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedBlock, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBlock);\n\n  function AnimatedBlock(array) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedBlock);\n    (0, _invariant.default)(array.every(function (el) {\n      return el instanceof _AnimatedNode2.default;\n    }), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'block',\n      block: array\n    }, array);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_array\", void 0);\n\n    _this._array = array;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedBlock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBlock, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n\n      this._array.forEach(function (node) {\n        result = (0, _val.val)(node);\n      });\n\n      return result;\n    }\n  }]);\n  return AnimatedBlock;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.__isProxy)) {\n    if (!v.__val) {\n      v.__val = new _InternalAnimatedValue.default(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof _AnimatedNode2.default ? v : _InternalAnimatedValue.default.valueForConstant(v);\n}\n\nfunction adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":{"version":3,"sources":["AnimatedBlock.js"],"names":["constructor","invariant","array","el","type","block","toString","__onEvaluate","node","result","val","adapt","v","InternalAnimatedValue","Array","nodify"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;IAEA,a;;;;;AAGEA,yBAAW,KAAXA,EAAmB;AAAA;;AAAA;AACjBC,4BACEC,KAAK,CAALA,KAAAA,CAAYC,UAAAA,EAAE;AAAA,aAAIA,EAAE,YADb,sBACO;AAAA,KAAdD,CADFD,EAAAA,2IAAAA;AAIA,8BAAM;AAAEG,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,KAAK,EAAEH;AAAxB,KAAN,EAAA,KAAA;;AALiB,IAAA,eAAA,8CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAMjB,UAAA,MAAA,GAAA,KAAA;AANiB;AAOlB;;;;WAEDI,oBAAW;AACT,aAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAA,MAAA;;AACA,WAAA,MAAA,CAAA,OAAA,CAAoBC,UAAAA,IAAI,EAAI;AAC1BC,QAAAA,MAAM,GAAGC,cAATD,IAASC,CAATD;AADF,OAAA;;AAGA,aAAA,MAAA;AACD;;;EAtBH,sB;;AAyBO,SAAA,mBAAA,CAAA,KAAA,EAAoC;AACzC,SAAOE,KAAK,CAAZ,KAAY,CAAZ;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,MAAI,OAAA,CAAA,KAAA,QAAA,KAAyBC,CAAzB,KAAA,IAAyBA,IAAAA,CAAzB,KAAA,KAAA,CAAyBA,GAAzB,KAAA,CAAyBA,GAAAA,CAAC,CAA9B,SAAI,CAAJ,EAA2C;AACzC,QAAI,CAACA,CAAC,CAAN,KAAA,EAAc;AACZA,MAAAA,CAAC,CAADA,KAAAA,GAAU,IAAA,8BAAA,CAAVA,CAAU,CAAVA;AACD;;AACD,WAAOA,CAAC,CAAR,KAAA;AALe;;AAQjB,SAAOA,CAAC,YAADA,sBAAAA,GAAAA,CAAAA,GAEHC,+BAAAA,gBAAAA,CAFJ,CAEIA,CAFJ;AAGD;;AAEM,SAAA,KAAA,CAAA,CAAA,EAAkB;AACvB,SAAOC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,IACH,IAAA,aAAA,CAAkBF,CAAC,CAADA,GAAAA,CAAMJ,UAAAA,IAAI;AAAA,WAAIG,KAAK,CADlCG,IACkC,CAAT;AAAA,GAAVF,CAAlB,CADGE,GAEHC,MAAM,CAFV,CAEU,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"script"}