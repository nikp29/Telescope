{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _base = require(\"../base\");\n\nvar VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  var lastTime = (0, _base.cond)(state.time, state.time, clock);\n  var deltaTime = (0, _base.sub)(clock, lastTime);\n  var kv = (0, _base.pow)(config.deceleration, deltaTime);\n  var kx = (0, _base.divide)((0, _base.multiply)(config.deceleration, (0, _base.sub)(1, kv)), (0, _base.sub)(1, config.deceleration));\n  var v0 = (0, _base.divide)(state.velocity, 1000);\n  var v = (0, _base.multiply)(v0, kv, 1000);\n  var x = (0, _base.add)(state.position, (0, _base.multiply)(v0, kx));\n  return (0, _base.block)([(0, _base.set)(state.position, x), (0, _base.set)(state.velocity, v), (0, _base.set)(state.time, clock), (0, _base.cond)((0, _base.lessThan)((0, _base.abs)(v), VELOCITY_EPS), (0, _base.set)(state.finished, 1))]);\n}\n\nvar procDecay = (0, _base.proc)(function (clock, time, velocity, position, finished, deceleration) {\n  return decay(clock, {\n    time: time,\n    velocity: velocity,\n    position: position,\n    finished: finished\n  }, {\n    deceleration: deceleration\n  });\n});\n\nvar _default = function _default(clock, _ref, _ref2) {\n  var time = _ref.time,\n      velocity = _ref.velocity,\n      position = _ref.position,\n      finished = _ref.finished;\n  var deceleration = _ref2.deceleration;\n  return procDecay(clock, time, velocity, position, finished, deceleration);\n};\n\nexports.default = _default;","map":{"version":3,"sources":["decay.js"],"names":["VELOCITY_EPS","lastTime","cond","state","deltaTime","sub","kv","pow","config","kx","divide","multiply","v0","v","x","add","block","set","lessThan","abs","procDecay","proc","decay","time","velocity","position","finished","deceleration"],"mappings":";;;;;AAAA;;AAcA,IAAMA,YAAY,GAAlB,CAAA;;AAEA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAqC;AACnC,MAAMC,QAAQ,GAAGC,gBAAKC,KAAK,CAAN,IAAJD,EAAiBC,KAAK,CAAlB,IAAJD,EAAjB,KAAiBA,CAAjB;AACA,MAAME,SAAS,GAAGC,eAAG,KAAHA,EAFiB,QAEjBA,CAAlB;AAQA,MAAMC,EAAE,GAAGC,eAAIC,MAAM,CAAP,YAAHD,EAAX,SAAWA,CAAX;AACA,MAAME,EAAE,GAAGC,kBACTC,oBAASH,MAAM,CAAP,YAARG,EAA8BN,eAAG,CAAHA,EADf,EACeA,CAA9BM,CADSD,EAETL,eAAG,CAAHA,EAAOG,MAAM,CAFf,YAEEH,CAFSK,CAAX;AAIA,MAAME,EAAE,GAAGF,kBAAOP,KAAK,CAAN,QAANO,EAAX,IAAWA,CAAX;AACA,MAAMG,CAAC,GAAGF,oBAAQ,EAARA,EAAQ,EAARA,EAAV,IAAUA,CAAV;AACA,MAAMG,CAAC,GAAGC,eAAIZ,KAAK,CAAN,QAAHY,EAAoBJ,oBAAQ,EAARA,EAA9B,EAA8BA,CAApBI,CAAV;AACA,SAAOC,iBAAM,CACXC,eAAId,KAAK,CAAN,QAAHc,EADW,CACXA,CADW,EAEXA,eAAId,KAAK,CAAN,QAAHc,EAFW,CAEXA,CAFW,EAGXA,eAAId,KAAK,CAAN,IAAHc,EAHW,KAGXA,CAHW,EAIXf,gBAAKgB,oBAASC,eAAD,CAACA,CAATD,EAAD,YAACA,CAALhB,EAAqCe,eAAId,KAAK,CAAN,QAAHc,EAJvC,CAIuCA,CAArCf,CAJW,CAANc,CAAP;AAMD;;AAED,IAAMI,SAAS,GAAGC,gBAChB,UAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA;AAAA,SACEC,KAAK,CAAA,KAAA,EAAQ;AAAEC,IAAAA,IAAF,EAAEA,IAAF;AAAQC,IAAAA,QAAR,EAAQA,QAAR;AAAkBC,IAAAA,QAAlB,EAAkBA,QAAlB;AAA4BC,IAAAA,QAAAA,EAAAA;AAA5B,GAAR,EAAgD;AAAEC,IAAAA,YAAAA,EAAAA;AAAF,GAAhD,CADP;AAAA,CADgBN,CAAlB;;eAKe,kBAAA,KAAA;AAAA,MAEb,IAFa,QAEb,IAFa;AAAA,MAEb,QAFa,QAEb,QAFa;AAAA,MAEb,QAFa,QAEb,QAFa;AAAA,MAEeK,QAFf,QAEeA,QAFf;AAAA,MAGXC,YAHW,SAGXA,YAHW;AAAA,SAIVP,SAAS,CAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAJd,YAIc,CAJC;AAAA,C","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n  proc,\n  abs,\n} from '../base';\n\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n\nconst procDecay = proc(\n  (clock, time, velocity, position, finished, deceleration) =>\n    decay(clock, { time, velocity, position, finished }, { deceleration })\n);\n\nexport default (\n  clock,\n  { time, velocity, position, finished },\n  { deceleration }\n) => procDecay(clock, time, velocity, position, finished, deceleration);\n"]},"metadata":{},"sourceType":"script"}