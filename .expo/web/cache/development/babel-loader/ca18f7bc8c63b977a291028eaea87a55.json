{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = interpolate;\nexports.Extrapolate = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _operators = require(\"../operators\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedNode = _interopRequireDefault(require(\"../core/AnimatedNode\"));\n\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\n\nvar _AnimatedFunction = require(\"../core/AnimatedFunction\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar interpolateInternalSingleProc = (0, _AnimatedFunction.createAnimatedFunction)(function (value, inS, inE, outS, outE) {\n  var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));\n  var resultForNonZeroRange = (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));\n  var result = (0, _AnimatedCond.createAnimatedCond)((0, _operators.eq)(inS, inE), (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessOrEq)(value, inS), outS, outE), resultForNonZeroRange);\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  var inS = inputRange[offset];\n  var inE = inputRange[offset + 1];\n  var outS = outputRange[offset];\n  var outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n\n  return (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\n\nvar Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nexports.Extrapolate = Extrapolate;\n\nfunction checkNonDecreasing(name, arr) {\n  for (var i = 1; i < arr.length; ++i) {\n    if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;\n    (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] instanceof _AnimatedNode.default || typeof arr[i] !== 'number') continue;\n    (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (var _iterator = _createForOfIteratorHelperLoose(outputRange.entries()), _step; !(_step = _iterator()).done;) {\n    var _ref = _step.value;\n\n    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n\n    var i = _ref2[0];\n    var value = _ref2[1];\n\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nfunction interpolate(value, config) {\n  var inputRange = config.inputRange,\n      outputRange = config.outputRange,\n      _config$extrapolate = config.extrapolate,\n      extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n      extrapolateLeft = config.extrapolateLeft,\n      extrapolateRight = config.extrapolateRight;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  convertToRadians(outputRange);\n  var left = extrapolateLeft || extrapolate;\n  var right = extrapolateRight || extrapolate;\n  var output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);\n  }\n\n  return output;\n}","map":{"version":3,"sources":["interpolate.js"],"names":["interpolateInternalSingleProc","proc","progress","divide","sub","resultForNonZeroRange","add","multiply","result","cond","eq","lessOrEq","inS","inputRange","inE","offset","outS","outputRange","outE","interpolateInternalSingle","lessThan","interpolateInternal","Extrapolate","EXTEND","CLAMP","IDENTITY","i","arr","invariant","Number","value","parseFloat","Math","extrapolate","extrapolateRight","checkMinElements","checkValidNumbers","checkNonDecreasing","convertToRadians","left","extrapolateLeft","right","output","greaterThan"],"mappings":"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","sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'fbjs/lib/invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function(\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(\n    eq(inS, inE),\n    cond(lessOrEq(value, inS), outS, outE),\n    resultForNonZeroRange\n  );\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    } else if (typeof value === 'string' && value.endsWith('rad')) {\n      outputRange[i] = parseFloat(value);\n    }\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}