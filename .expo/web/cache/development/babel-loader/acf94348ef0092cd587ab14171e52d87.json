{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _Keyboard = _interopRequireDefault(require(\"react-native-web/dist/exports/Keyboard\"));\n\nvar _InteractionManager = _interopRequireDefault(require(\"react-native-web/dist/exports/InteractionManager\"));\n\nvar _reactNativeReanimated = _interopRequireDefault(require(\"react-native-reanimated\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar event = _reactNativeReanimated.default.event,\n    divide = _reactNativeReanimated.default.divide,\n    onChange = _reactNativeReanimated.default.onChange,\n    cond = _reactNativeReanimated.default.cond,\n    eq = _reactNativeReanimated.default.eq,\n    round = _reactNativeReanimated.default.round,\n    call = _reactNativeReanimated.default.call,\n    Value = _reactNativeReanimated.default.Value;\n\nvar ScrollPager = function (_React$Component) {\n  (0, _inherits2.default)(ScrollPager, _React$Component);\n\n  var _super = _createSuper(ScrollPager);\n\n  function ScrollPager() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ScrollPager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"initialOffset\", {\n      x: _this.props.navigationState.index * _this.props.layout.width,\n      y: 0\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"wasTouched\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"interactionHandle\", null);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"scrollViewRef\", React.createRef());\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"jumpTo\", function (key) {\n      _this.wasTouched = false;\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          onIndexChange = _this$props.onIndexChange;\n      var index = navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      if (navigationState.index === index) {\n        _this.scrollTo(index * _this.props.layout.width);\n      } else {\n        onIndexChange(index);\n\n        if (keyboardDismissMode === 'auto') {\n          _Keyboard.default.dismiss();\n        }\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"scrollTo\", function (x) {\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (_this.scrollViewRef.current) {\n        var _this$scrollViewRef$c, _this$scrollViewRef$c2;\n\n        var scrollView = typeof ((_this$scrollViewRef$c = _this.scrollViewRef.current) === null || _this$scrollViewRef$c === void 0 ? void 0 : _this$scrollViewRef$c.scrollTo) === 'function' ? _this.scrollViewRef.current : (_this$scrollViewRef$c2 = _this.scrollViewRef.current) === null || _this$scrollViewRef$c2 === void 0 ? void 0 : _this$scrollViewRef$c2.getNode();\n        scrollView === null || scrollView === void 0 ? void 0 : scrollView.scrollTo({\n          x: x,\n          animated: animated\n        });\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"enterListeners\", []);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"addListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          _this.enterListeners.push(listener);\n\n          break;\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"removeListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          {\n            var index = _this.enterListeners.indexOf(listener);\n\n            if (index > -1) {\n              _this.enterListeners.splice(index, 1);\n            }\n\n            break;\n          }\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"position\", new _reactNativeReanimated.default.Value(_this.props.navigationState.index * _this.props.layout.width));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onScroll\", event([{\n      nativeEvent: {\n        contentOffset: {\n          x: _this.position\n        }\n      }\n    }]));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"layoutWidthNode\", new Value(_this.props.layout.width));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"relativePosition\", divide(_this.position, _this.layoutWidthNode));\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(ScrollPager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.layout.width) {\n        this.scrollTo(this.props.navigationState.index * this.props.layout.width, false);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var offset = this.props.navigationState.index * this.props.layout.width;\n\n      if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {\n        this.scrollTo(offset, false);\n      } else if (prevProps.navigationState.index !== this.props.navigationState.index) {\n        this.scrollTo(offset);\n      }\n\n      if (prevProps.layout.width !== this.props.layout.width) {\n        this.layoutWidthNode.setValue(this.props.layout.width);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interactionHandle !== null) {\n        _InteractionManager.default.clearInteractionHandle(this.interactionHandle);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          layout = _this$props2.layout,\n          onSwipeStart = _this$props2.onSwipeStart,\n          onSwipeEnd = _this$props2.onSwipeEnd,\n          overscroll = _this$props2.overscroll,\n          onIndexChange = _this$props2.onIndexChange,\n          navigationState = _this$props2.navigationState;\n\n      var handleSwipeStart = function handleSwipeStart() {\n        _this2.wasTouched = false;\n        onSwipeStart === null || onSwipeStart === void 0 ? void 0 : onSwipeStart();\n        _this2.interactionHandle = _InteractionManager.default.createInteractionHandle();\n      };\n\n      var handleSwipeEnd = function handleSwipeEnd() {\n        _this2.wasTouched = true;\n        onSwipeEnd === null || onSwipeEnd === void 0 ? void 0 : onSwipeEnd();\n\n        if (_this2.interactionHandle !== null) {\n          _InteractionManager.default.clearInteractionHandle(_this2.interactionHandle);\n        }\n      };\n\n      return children({\n        position: this.relativePosition,\n        addListener: this.addListener,\n        removeListener: this.removeListener,\n        jumpTo: this.jumpTo,\n        render: function render(children) {\n          return React.createElement(_reactNativeReanimated.default.ScrollView, {\n            pagingEnabled: true,\n            directionalLockEnabled: true,\n            keyboardDismissMode: \"on-drag\",\n            keyboardShouldPersistTaps: \"always\",\n            overScrollMode: \"never\",\n            scrollToOverflowEnabled: true,\n            scrollEnabled: _this2.props.swipeEnabled,\n            automaticallyAdjustContentInsets: false,\n            bounces: overscroll,\n            scrollsToTop: false,\n            showsHorizontalScrollIndicator: false,\n            scrollEventThrottle: 1,\n            onScroll: _this2.onScroll,\n            onScrollBeginDrag: handleSwipeStart,\n            onScrollEndDrag: handleSwipeEnd,\n            onMomentumScrollEnd: _this2.onScroll,\n            contentOffset: _this2.initialOffset,\n            style: styles.container,\n            contentContainerStyle: layout.width ? {\n              flexDirection: 'row',\n              width: layout.width * navigationState.routes.length,\n              flex: 1\n            } : null,\n            ref: _this2.scrollViewRef\n          }, children, React.createElement(_reactNativeReanimated.default.Code, {\n            exec: onChange(_this2.relativePosition, cond(eq(round(_this2.relativePosition), _this2.relativePosition), [call([_this2.relativePosition], function (_ref) {\n              var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n                  relativePosition = _ref2[0];\n\n              if (_this2.wasTouched) {\n                onIndexChange(relativePosition);\n                _this2.wasTouched = false;\n              }\n            })]))\n          }));\n        }\n      });\n    }\n  }]);\n  return ScrollPager;\n}(React.Component);\n\nexports.default = ScrollPager;\n\n_defineProperty(ScrollPager, \"defaultProps\", {\n  bounces: true\n});\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["ScrollPager.tsx"],"names":["Value","ScrollPager","React","bounces","componentDidMount","componentDidUpdate","offset","prevProps","componentWillUnmount","InteractionManager","x","y","key","onIndexChange","index","navigationState","route","keyboardDismissMode","Keyboard","animated","scrollView","Animated","event","nativeEvent","contentOffset","position","divide","render","handleSwipeStart","onSwipeStart","handleSwipeEnd","onSwipeEnd","children","addListener","removeListener","jumpTo","styles","flexDirection","width","layout","flex","scrollViewRef","onChange","cond","eq","round","call","container"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Props } from './Pager';\nimport { Route, Listener } from './types';\n\nconst { event, divide, onChange, cond, eq, round, call, Value } = Animated;\n\ntype State = {\n  initialOffset: { x: number; y: number };\n};\n\nexport default class ScrollPager<T extends Route> extends React.Component<\n  Props<T> & { overscroll?: boolean },\n  State\n> {\n  static defaultProps = {\n    bounces: true,\n  };\n\n  componentDidMount() {\n    if (this.props.layout.width) {\n      this.scrollTo(\n        this.props.navigationState.index * this.props.layout.width,\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const offset = this.props.navigationState.index * this.props.layout.width;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        this.props.navigationState.routes.length ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this.scrollTo(offset, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this.scrollTo(offset);\n    }\n\n    if (prevProps.layout.width !== this.props.layout.width) {\n      this.layoutWidthNode.setValue(this.props.layout.width);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  private initialOffset = {\n    x: this.props.navigationState.index * this.props.layout.width,\n    y: 0,\n  };\n\n  private wasTouched: boolean = false;\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private jumpTo = (key: string) => {\n    this.wasTouched = false;\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    if (navigationState.index === index) {\n      this.scrollTo(index * this.props.layout.width);\n    } else {\n      onIndexChange(index);\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private scrollTo = (x: number, animated = true) => {\n    if (this.scrollViewRef.current) {\n      // getNode() is not necessary in newer versions of React Native\n      const scrollView =\n        // @ts-ignore\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\n          ? this.scrollViewRef.current\n          : this.scrollViewRef.current?.getNode();\n\n      // @ts-ignore\n      scrollView?.scrollTo({\n        x,\n        animated: animated,\n      });\n    }\n  };\n\n  private enterListeners: Listener[] = [];\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private position = new Animated.Value(\n    this.props.navigationState.index * this.props.layout.width\n  );\n\n  private onScroll = event([\n    {\n      nativeEvent: {\n        contentOffset: {\n          x: this.position,\n        },\n      },\n    },\n  ]);\n\n  private layoutWidthNode = new Value(this.props.layout.width);\n\n  private relativePosition = divide(this.position, this.layoutWidthNode);\n\n  render() {\n    const {\n      children,\n      layout,\n      onSwipeStart,\n      onSwipeEnd,\n      overscroll,\n      onIndexChange,\n      navigationState,\n    } = this.props;\n\n    const handleSwipeStart = () => {\n      this.wasTouched = false;\n      onSwipeStart?.();\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    };\n\n    const handleSwipeEnd = () => {\n      this.wasTouched = true;\n      onSwipeEnd?.();\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    };\n\n    return children({\n      position: this.relativePosition,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <Animated.ScrollView\n          pagingEnabled\n          directionalLockEnabled\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps=\"always\"\n          overScrollMode=\"never\"\n          scrollToOverflowEnabled\n          scrollEnabled={this.props.swipeEnabled}\n          automaticallyAdjustContentInsets={false}\n          bounces={overscroll}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          scrollEventThrottle={1}\n          onScroll={this.onScroll}\n          onScrollBeginDrag={handleSwipeStart}\n          onScrollEndDrag={handleSwipeEnd}\n          onMomentumScrollEnd={this.onScroll}\n          contentOffset={this.initialOffset}\n          style={styles.container}\n          contentContainerStyle={\n            layout.width\n              ? {\n                  flexDirection: 'row',\n                  width: layout.width * navigationState.routes.length,\n                  flex: 1,\n                }\n              : null\n          }\n          ref={this.scrollViewRef}\n        >\n          {children}\n          <Animated.Code\n            exec={onChange(\n              this.relativePosition,\n              cond(eq(round(this.relativePosition), this.relativePosition), [\n                call([this.relativePosition], ([relativePosition]) => {\n                  if (this.wasTouched) {\n                    onIndexChange(relativePosition);\n                    this.wasTouched = false;\n                  }\n                }),\n              ])\n            )}\n          />\n        </Animated.ScrollView>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}