{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedOperator = createAnimatedOperator;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _val = require(\"../val\");\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction reduce(fn) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn((0, _val.val)(a), (0, _val.val)(b));\n    });\n  };\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return function (input) {\n    return input.reduce(function (a, b) {\n      return fn((0, _val.val)(a), (0, _val.val)(b));\n    }, initialValue);\n  };\n}\n\nfunction infix(fn) {\n  return function (input) {\n    return fn((0, _val.val)(input[0]), (0, _val.val)(input[1]));\n  };\n}\n\nfunction single(fn) {\n  return function (input) {\n    return fn((0, _val.val)(input[0]));\n  };\n}\n\nvar OPERATIONS = {\n  add: reduce(function (a, b) {\n    return a + b;\n  }),\n  sub: reduce(function (a, b) {\n    return a - b;\n  }),\n  multiply: reduce(function (a, b) {\n    return a * b;\n  }),\n  divide: reduce(function (a, b) {\n    return a / b;\n  }),\n  pow: reduce(function (a, b) {\n    return Math.pow(a, b);\n  }),\n  modulo: reduce(function (a, b) {\n    return (a % b + b) % b;\n  }),\n  sqrt: single(function (a) {\n    return Math.sqrt(a);\n  }),\n  log: single(function (a) {\n    return Math.log(a);\n  }),\n  sin: single(function (a) {\n    return Math.sin(a);\n  }),\n  cos: single(function (a) {\n    return Math.cos(a);\n  }),\n  tan: single(function (a) {\n    return Math.tan(a);\n  }),\n  acos: single(function (a) {\n    return Math.acos(a);\n  }),\n  asin: single(function (a) {\n    return Math.asin(a);\n  }),\n  atan: single(function (a) {\n    return Math.atan(a);\n  }),\n  exp: single(function (a) {\n    return Math.exp(a);\n  }),\n  round: single(function (a) {\n    return Math.round(a);\n  }),\n  abs: single(function (a) {\n    return Math.abs(a);\n  }),\n  ceil: single(function (a) {\n    return Math.ceil(a);\n  }),\n  floor: single(function (a) {\n    return Math.floor(a);\n  }),\n  max: reduce(function (a, b) {\n    return Math.max(a, b);\n  }),\n  min: reduce(function (a, b) {\n    return Math.min(a, b);\n  }),\n  and: reduceFrom(function (a, b) {\n    return a && b;\n  }, true),\n  or: reduceFrom(function (a, b) {\n    return a || b;\n  }, false),\n  not: single(function (a) {\n    return !a;\n  }),\n  defined: single(function (a) {\n    return a !== null && a !== undefined && !isNaN(a);\n  }),\n  lessThan: infix(function (a, b) {\n    return a < b;\n  }),\n  eq: infix(function (a, b) {\n    return a == b;\n  }),\n  greaterThan: infix(function (a, b) {\n    return a > b;\n  }),\n  lessOrEq: infix(function (a, b) {\n    return a <= b;\n  }),\n  greaterOrEq: infix(function (a, b) {\n    return a >= b;\n  }),\n  neq: infix(function (a, b) {\n    return a != b;\n  })\n};\n\nvar AnimatedOperator = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedOperator, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedOperator);\n\n  function AnimatedOperator(operator, input) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedOperator);\n    (0, _invariant.default)(typeof operator === 'string', \"Reanimated: Animated.operator node first argument should be of type String, but got: \".concat(operator));\n    (0, _invariant.default)(input.every(function (el) {\n      return el instanceof _AnimatedNode2.default || typeof el === 'string' || typeof el === 'number';\n    }), \"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \".concat(input));\n    _this = _super.call(this, {\n      type: 'op',\n      op: operator,\n      input: input\n    }, input);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_input\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_op\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_operation\", void 0);\n\n    _this._op = operator;\n    _this._input = input;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedOperator, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedOperator, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (!this._operation) {\n        this._operation = OPERATIONS[this._op];\n        (0, _invariant.default)(this._operation, \"Illegal operator '%s'\", this._op);\n      }\n\n      return this._operation(this._input);\n    }\n  }]);\n  return AnimatedOperator;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new AnimatedOperator(name, args.map(_AnimatedBlock.adapt));\n  };\n}","map":{"version":3,"sources":["AnimatedOperator.js"],"names":["input","fn","val","OPERATIONS","add","reduce","a","sub","multiply","divide","pow","Math","modulo","sqrt","single","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","reduceFrom","or","not","defined","isNaN","lessThan","infix","eq","greaterThan","lessOrEq","greaterOrEq","neq","constructor","invariant","el","type","op","toString","__onEvaluate","args"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a,b) => Math.max(a, b)),\n  min: reduce((a,b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super(\n      { type: 'op', op: operator, input },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"script"}