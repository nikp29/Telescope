{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = interpolateColors;\n\nvar _processColor = _interopRequireDefault(require(\"react-native-web/dist/exports/processColor\"));\n\nvar _base = require(\"../base\");\n\nvar _color = _interopRequireDefault(require(\"./color\"));\n\nvar _interpolate = _interopRequireWildcard(require(\"./interpolate\"));\n\nfunction red(c) {\n  return c >> 16 & 255;\n}\n\nfunction green(c) {\n  return c >> 8 & 255;\n}\n\nfunction blue(c) {\n  return c & 255;\n}\n\nfunction opacity(c) {\n  return (c >> 24 & 255) / 255;\n}\n\nfunction interpolateColors(animationValue, options) {\n  var inputRange = options.inputRange,\n      outputColorRange = options.outputColorRange;\n  var colors = outputColorRange.map(_processColor.default);\n  var r = (0, _base.round)((0, _interpolate.default)(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(red),\n    extrapolate: _interpolate.Extrapolate.CLAMP\n  }));\n  var g = (0, _base.round)((0, _interpolate.default)(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(green),\n    extrapolate: _interpolate.Extrapolate.CLAMP\n  }));\n  var b = (0, _base.round)((0, _interpolate.default)(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(blue),\n    extrapolate: _interpolate.Extrapolate.CLAMP\n  }));\n  var a = (0, _interpolate.default)(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: _interpolate.Extrapolate.CLAMP\n  });\n  return (0, _color.default)(r, g, b, a);\n}","map":{"version":3,"sources":["interpolateColors.js"],"names":["c","outputColorRange","colors","r","round","interpolate","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","g","b","a","color"],"mappings":";;;;;;;;;;;AACA;;AACA;;AACA;;AAEA,SAAA,GAAA,CAAA,CAAA,EAAgB;AACd,SAAQA,CAAC,IAAF,EAACA,GAAR,GAAA;AACD;;AACD,SAAA,KAAA,CAAA,CAAA,EAAkB;AAChB,SAAQA,CAAC,IAAF,CAACA,GAAR,GAAA;AACD;;AACD,SAAA,IAAA,CAAA,CAAA,EAAiB;AACf,SAAOA,CAAC,GAAR,GAAA;AACD;;AACD,SAAA,OAAA,CAAA,CAAA,EAAoB;AAClB,SAAO,CAAEA,CAAC,IAAF,EAACA,GAAF,GAAA,IAAP,GAAA;AACD;;AAac,SAAA,iBAAA,CAAA,cAAA,EAAA,OAAA,EAAoD;AAAA,MAC3D,UAD2D,GACjE,OADiE,CAC3D,UAD2D;AAAA,MAC7CC,gBAD6C,GACjE,OADiE,CAC7CA,gBAD6C;AAEjE,MAAMC,MAAM,GAAGD,gBAAgB,CAAhBA,GAAAA,CAAf,qBAAeA,CAAf;AAEA,MAAME,CAAC,GAAGC,iBACRC,0BAAW,cAAXA,EAA4B;AAC1BC,IAAAA,UAD0B,EAC1BA,UAD0B;AAE1BC,IAAAA,WAAW,EAAEL,MAAM,CAANA,GAAAA,CAFa,GAEbA,CAFa;AAG1BM,IAAAA,WAAW,EAAEC,yBAAYC;AAHC,GAA5BL,CADQD,CAAV;AAOA,MAAMO,CAAC,GAAGP,iBACRC,0BAAW,cAAXA,EAA4B;AAC1BC,IAAAA,UAD0B,EAC1BA,UAD0B;AAE1BC,IAAAA,WAAW,EAAEL,MAAM,CAANA,GAAAA,CAFa,KAEbA,CAFa;AAG1BM,IAAAA,WAAW,EAAEC,yBAAYC;AAHC,GAA5BL,CADQD,CAAV;AAOA,MAAMQ,CAAC,GAAGR,iBACRC,0BAAW,cAAXA,EAA4B;AAC1BC,IAAAA,UAD0B,EAC1BA,UAD0B;AAE1BC,IAAAA,WAAW,EAAEL,MAAM,CAANA,GAAAA,CAFa,IAEbA,CAFa;AAG1BM,IAAAA,WAAW,EAAEC,yBAAYC;AAHC,GAA5BL,CADQD,CAAV;AAOA,MAAMS,CAAC,GAAGR,0BAAW,cAAXA,EAA4B;AACpCC,IAAAA,UADoC,EACpCA,UADoC;AAEpCC,IAAAA,WAAW,EAAEL,MAAM,CAANA,GAAAA,CAFuB,OAEvBA,CAFuB;AAGpCM,IAAAA,WAAW,EAAEC,yBAAYC;AAHW,GAA5BL,CAAV;AAMA,SAAOS,oBAAK,CAALA,EAAK,CAALA,EAAK,CAALA,EAAP,CAAOA,CAAP;AACD","sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"]},"metadata":{},"sourceType":"script"}