{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Button = _interopRequireDefault(require(\"react-native-web/dist/exports/Button\"));\n\nvar _Image = _interopRequireDefault(require(\"react-native-web/dist/exports/Image\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar ImagePicker = _interopRequireWildcard(require(\"expo-image-picker\"));\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar _config = require(\"../firebase/config.js\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/rithikpothuganti/Telescope-app/Telescope/src/components/ImagePick.js\";\n\nvar ImagePick = function ImagePick(_ref) {\n  var setURL = _ref.setURL;\n\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_Platform.default.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regenerator.default.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [1, 1],\n              quality: 1,\n              borderBottomLeftRadius: 30,\n              borderBottomRightRadius: 30,\n              borderTopRightRadius: 30,\n              borderTopLeftRadius: 30\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              upload(result.uri, setURL);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_View.default, {\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {\n    onPress: pickImage,\n    style: styles.button,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_Text.default, {\n    style: styles.buttonStyle,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Update Profile Picture\")));\n};\n\nvar upload = function upload(image, setURL) {\n  var response, blob, storageRef, uid, imageRef;\n  return _regenerator.default.async(function upload$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regenerator.default.awrap(fetch(image));\n\n        case 2:\n          response = _context3.sent;\n          _context3.next = 5;\n          return _regenerator.default.awrap(response.blob());\n\n        case 5:\n          blob = _context3.sent;\n          storageRef = _config.firebase.storage().ref();\n          _context3.next = 9;\n          return _regenerator.default.awrap(_asyncStorage.default.getItem(\"token\"));\n\n        case 9:\n          uid = _context3.sent;\n          imageRef = storageRef.child(\"profile_pictures/\" + uid + \".jpg\");\n          imageRef.put(blob).then(function (snapshot) {}).then(function () {\n            _config.firebase.firestore().collection(\"users\").doc(uid).update({\n              pic: true\n            });\n          }).then(function () {\n            imageRef.getDownloadURL().then(function (url) {\n              setURL({\n                uri: url\n              });\n            });\n          }).catch(function (e) {\n            return console.log(\"uploading image error => \", e);\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar styles = _StyleSheet.default.create({\n  buttonStyle: {\n    color: \"white\",\n    fontFamily: \"Raleway-SemiBold\",\n    fontSize: 14\n  },\n  button: {\n    width: 180,\n    backgroundColor: \"#5C33FF\",\n    padding: 5,\n    borderRadius: 25,\n    marginTop: 10,\n    alignItems: \"center\"\n  }\n});\n\nvar _default = ImagePick;\nexports.default = _default;","map":{"version":3,"sources":["/Users/rithikpothuganti/Telescope-app/Telescope/src/components/ImagePick.js"],"names":["ImagePick","setURL","image","setImage","Platform","OS","ImagePicker","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","borderBottomLeftRadius","borderBottomRightRadius","borderTopRightRadius","borderTopLeftRadius","result","cancelled","uri","upload","styles","button","buttonStyle","fetch","response","blob","storageRef","firebase","storage","ref","AsyncStorage","getItem","uid","imageRef","child","put","then","snapshot","firestore","collection","doc","update","pic","getDownloadURL","url","catch","e","console","log","StyleSheet","create","color","fontFamily","fontSize","width","backgroundColor","padding","borderRadius","marginTop","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Image, View, Platform, Text, StyleSheet } from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Constants from \"expo-constants\";\nimport { firebase } from \"../firebase/config.js\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst ImagePick = ({ setURL }) => {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== \"web\") {\n        const {\n          status,\n        } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== \"granted\") {\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [1, 1],\n      quality: 1,\n      borderBottomLeftRadius: 30,\n      borderBottomRightRadius: 30,\n      borderTopRightRadius: 30,\n      borderTopLeftRadius: 30,\n    });\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n      upload(result.uri, setURL);\n    }\n  };\n\n  return (\n    <View>\n      <TouchableOpacity\n         onPress={pickImage}          \n         style={styles.button}\n      >\n        \n      <Text\n        style={styles.buttonStyle}\n      >Update Profile Picture</Text>\n      </TouchableOpacity> \n    </View>\n  );\n};\n\nconst upload = async (image, setURL) => {\n  const response = await fetch(image);\n  const blob = await response.blob();\n  var storageRef = firebase.storage().ref();\n  const uid = await AsyncStorage.getItem(\"token\");\n  var imageRef = storageRef.child(\"profile_pictures/\" + uid + \".jpg\");\n  imageRef\n    .put(blob)\n    .then((snapshot) => {})\n    .then(() => {\n      firebase.firestore().collection(\"users\").doc(uid).update({\n        pic: true,\n      });\n    })\n    .then(() => {\n      imageRef.getDownloadURL().then((url) => {\n        setURL({ uri: url });\n      });\n    })\n    .catch((e) => console.log(\"uploading image error => \", e));\n};\n\nconst styles = StyleSheet.create({\n  buttonStyle: {\n    color: \"white\",\n    fontFamily: \"Raleway-SemiBold\",\n    fontSize: 14,\n  },\n  button: {\n    width: 180,\n    backgroundColor: \"#5C33FF\",\n    padding: 5,\n    borderRadius: 25,\n    marginTop: 10,\n    alignItems: \"center\"\n  }\n});\n\nexport default ImagePick;\n"]},"metadata":{},"sourceType":"script"}