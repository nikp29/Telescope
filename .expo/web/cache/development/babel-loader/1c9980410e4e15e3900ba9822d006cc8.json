{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction uuidToBytes(uuid) {\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str));\n  var bytes = new Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\nvar DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nvar URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  };\n\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","map":{"version":3,"sources":["/Users/rithikpothuganti/Telescope-app/Telescope/node_modules/expo-image-picker/node_modules/uuid/dist/esm-browser/v35.js"],"names":["uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","Array","length","i","charCodeAt","DNS","URL","name","version","hashfunc","generateUUID","value","namespace","buf","offset","off","isArray","TypeError","concat","idx","err"],"mappings":";;;;;;;;AAAA;;AAEA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAEzB,MAAIC,KAAK,GAAG,EAAZ;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,iBAAb,EAAgC,UAAUC,GAAV,EAAe;AAC7CF,IAAAA,KAAK,CAACG,IAAN,CAAWC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAnB;AACD,GAFD;AAGA,SAAOF,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,GAAvB,EAA4B;AAC1BA,EAAAA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAAd;AAEA,MAAIN,KAAK,GAAG,IAAIS,KAAJ,CAAUH,GAAG,CAACI,MAAd,CAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACI,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCX,IAAAA,KAAK,CAACW,CAAD,CAAL,GAAWL,GAAG,CAACM,UAAJ,CAAeD,CAAf,CAAX;AACD;;AAED,SAAOX,KAAP;AACD;;AAEM,IAAIa,GAAG,GAAG,sCAAV;;AACA,IAAIC,GAAG,GAAG,sCAAV;;;AACQ,kBAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AAChD,MAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,GAAxC,EAA6CC,MAA7C,EAAqD;AACtE,QAAIC,GAAG,GAAGF,GAAG,IAAIC,MAAP,IAAiB,CAA3B;AACA,QAAI,OAAOH,KAAP,IAAgB,QAApB,EAA8BA,KAAK,GAAGd,aAAa,CAACc,KAAD,CAArB;AAC9B,QAAI,OAAOC,SAAP,IAAoB,QAAxB,EAAkCA,SAAS,GAAGtB,WAAW,CAACsB,SAAD,CAAvB;AAClC,QAAI,CAACX,KAAK,CAACe,OAAN,CAAcL,KAAd,CAAL,EAA2B,MAAMM,SAAS,CAAC,iCAAD,CAAf;AAC3B,QAAI,CAAChB,KAAK,CAACe,OAAN,CAAcJ,SAAd,CAAD,IAA6BA,SAAS,CAACV,MAAV,KAAqB,EAAtD,EAA0D,MAAMe,SAAS,CAAC,6DAAD,CAAf;AAE1D,QAAIzB,KAAK,GAAGiB,QAAQ,CAACG,SAAS,CAACM,MAAV,CAAiBP,KAAjB,CAAD,CAApB;AACAnB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkBgB,OAA7B;AACAhB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkB,IAA7B;;AAEA,QAAIqB,GAAJ,EAAS;AACP,WAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4B,EAAEA,GAA9B,EAAmC;AACjCN,QAAAA,GAAG,CAACE,GAAG,GAAGI,GAAP,CAAH,GAAiB3B,KAAK,CAAC2B,GAAD,CAAtB;AACD;AACF;;AAED,WAAON,GAAG,IAAI,0BAAYrB,KAAZ,CAAd;AACD,GAlBD;;AAqBA,MAAI;AACFkB,IAAAA,YAAY,CAACH,IAAb,GAAoBA,IAApB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY,CAAE;;AAGhBV,EAAAA,YAAY,CAACL,GAAb,GAAmBA,GAAnB;AACAK,EAAAA,YAAY,CAACJ,GAAb,GAAmBA,GAAnB;AACA,SAAOI,YAAP;AACD","sourcesContent":["import bytesToUuid from './bytesToUuid.js';\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = new Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values'); // Per 4.3\n\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  }; // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name;\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"]},"metadata":{},"sourceType":"script"}