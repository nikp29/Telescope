{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _DiscussionForm = _interopRequireDefault(require(\"../components/DiscussionForm\"));\n\nvar _navigationRef = require(\"../navigationRef\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _config = require(\"../firebase/config.js\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/rithikpothuganti/Telescope-app/Telescope/src/screens/DiscussionUploadScreen.js\";\n\nvar DiscussionUploadScreen = function DiscussionUploadScreen(props) {\n  var _useState = (0, _react.useState)(\"\"),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var pushDiscusion = function pushDiscusion(_ref) {\n    var title, setError, description, discussionRef, uid;\n    return _regenerator.default.async(function pushDiscusion$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            title = _ref.title, setError = _ref.setError, description = _ref.description;\n            discussionRef = _config.firebase.firestore().collection(\"discussions\");\n            _context.next = 4;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem(\"token\"));\n\n          case 4:\n            uid = _context.sent;\n            _context.next = 7;\n            return _regenerator.default.awrap(discussionRef.add({\n              title: title,\n              description: description,\n              discussion_uid: uid,\n              upvotes: [],\n              num_upvotes: 0,\n              num_comments: 0,\n              timestamp: (0, _moment.default)().unix().valueOf()\n            }).catch(function (error) {\n              setError(error.message);\n            }));\n\n          case 7:\n            (0, _navigationRef.navigate)(\"DiscussionFeed\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_View.default, {\n    style: styles.container,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_DiscussionForm.default, {\n    headerText: \"Create Discussion\",\n    errorMessage: error,\n    submitButtonText: \"Submit\",\n    onSubmit: pushDiscusion,\n    setError: setError,\n    goback: function goback() {\n      return props.navigation.goBack(null);\n    },\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n};\n\nDiscussionUploadScreen.navigationOptions = function () {\n  return {\n    header: function header() {\n      return false;\n    }\n  };\n};\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    justifyContent: \"center\",\n    marginBottom: 250,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"scroll\"\n  }\n});\n\nvar _default = DiscussionUploadScreen;\nexports.default = _default;","map":{"version":3,"sources":["/Users/rithikpothuganti/Telescope-app/Telescope/src/screens/DiscussionUploadScreen.js"],"names":["DiscussionUploadScreen","props","error","setError","pushDiscusion","title","description","discussionRef","firebase","firestore","collection","AsyncStorage","getItem","uid","add","discussion_uid","upvotes","num_upvotes","num_comments","timestamp","unix","valueOf","catch","message","styles","container","navigation","goBack","navigationOptions","header","StyleSheet","create","justifyContent","marginBottom","height","backgroundColor","flexDirection","alignItems","overflow"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;AAEA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAW;AAAA,kBACd,qBAAS,EAAT,CADc;AAAA;AAAA,MACjCC,KADiC;AAAA,MAC1BC,QAD0B;;AAGxC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT,EAAgBF,QAAhB,QAAgBA,QAAhB,EAA0BG,WAA1B,QAA0BA,WAA1B;AACdC,YAAAA,aADc,GACEC,iBAASC,SAAT,GAAqBC,UAArB,CAAgC,aAAhC,CADF;AAAA;AAAA,8CAEFC,sBAAaC,OAAb,CAAqB,OAArB,CAFE;;AAAA;AAEdC,YAAAA,GAFc;AAAA;AAAA,8CAGdN,aAAa,CAChBO,GADG,CACC;AACHT,cAAAA,KAAK,EAAEA,KADJ;AAEHC,cAAAA,WAAW,EAAEA,WAFV;AAGHS,cAAAA,cAAc,EAAEF,GAHb;AAIHG,cAAAA,OAAO,EAAE,EAJN;AAKHC,cAAAA,WAAW,EAAE,CALV;AAMHC,cAAAA,YAAY,EAAE,CANX;AAOHC,cAAAA,SAAS,EAAE,uBAASC,IAAT,GAAgBC,OAAhB;AAPR,aADD,EAUHC,KAVG,CAUG,UAACpB,KAAD,EAAW;AAChBC,cAAAA,QAAQ,CAACD,KAAK,CAACqB,OAAP,CAAR;AACD,aAZG,CAHc;;AAAA;AAgBpB,yCAAS,gBAAT;;AAhBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAkBA,SACE,6BAAC,aAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,uBAAD;AACE,IAAA,UAAU,EAAC,mBADb;AAEE,IAAA,YAAY,EAAEvB,KAFhB;AAGE,IAAA,gBAAgB,EAAC,QAHnB;AAIE,IAAA,QAAQ,EAAEE,aAJZ;AAKE,IAAA,QAAQ,EAAED,QALZ;AAME,IAAA,MAAM,EAAE;AAAA,aAAMF,KAAK,CAACyB,UAAN,CAAiBC,MAAjB,CAAwB,IAAxB,CAAN;AAAA,KANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAYD,CAjCD;;AAmCA3B,sBAAsB,CAAC4B,iBAAvB,GAA2C,YAAM;AAC/C,SAAO;AACLC,IAAAA,MAAM,EAAE;AAAA,aAAM,KAAN;AAAA;AADH,GAAP;AAGD,CAJD;;AAMA,IAAML,MAAM,GAAGM,oBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,YAAY,EAAE,GAFL;AAGTC,IAAAA,MAAM,EAAE,MAHC;AAITC,IAAAA,eAAe,EAAE,OAJR;AAKTC,IAAAA,aAAa,EAAE,QALN;AAMTJ,IAAAA,cAAc,EAAE,QANP;AAOTK,IAAAA,UAAU,EAAE,QAPH;AAQTC,IAAAA,QAAQ,EAAE;AARD;AADoB,CAAlB,CAAf;;eAaetC,sB","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport DiscussionForm from \"../components/DiscussionForm\";\nimport { navigate } from \"../navigationRef\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { firebase } from \"../firebase/config.js\";\nimport moment from \"moment\";\n\nconst DiscussionUploadScreen = (props) => {\n  const [error, setError] = useState(\"\");\n\n  const pushDiscusion = async ({ title, setError, description }) => {\n    const discussionRef = firebase.firestore().collection(\"discussions\");\n    const uid = await AsyncStorage.getItem(\"token\");\n    await discussionRef\n      .add({\n        title: title,\n        description: description,\n        discussion_uid: uid,\n        upvotes: [],\n        num_upvotes: 0,\n        num_comments: 0,\n        timestamp: moment().unix().valueOf(),\n      })\n      .catch((error) => {\n        setError(error.message);\n      });\n    navigate(\"DiscussionFeed\");\n  };\n  return (\n    <View style={styles.container}>\n      <DiscussionForm\n        headerText=\"Create Discussion\"\n        errorMessage={error}\n        submitButtonText=\"Submit\"\n        onSubmit={pushDiscusion}\n        setError={setError}\n        goback={() => props.navigation.goBack(null)}\n      />\n    </View>\n  );\n};\n\nDiscussionUploadScreen.navigationOptions = () => {\n  return {\n    header: () => false,\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: \"center\",\n    marginBottom: 250,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"scroll\",\n  },\n});\n\nexport default DiscussionUploadScreen;\n"]},"metadata":{},"sourceType":"script"}