{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluateOnce = evaluateOnce;\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"../core/InternalAnimatedValue\"));\n\nvar _AnimatedSet = require(\"../core/AnimatedSet\");\n\nvar _AnimatedCall = require(\"../core/AnimatedCall\");\n\nvar _AnimatedAlways = require(\"../core/AnimatedAlways\");\n\nvar _AnimatedCond = require(\"../core/AnimatedCond\");\n\nfunction evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  var done = new _InternalAnimatedValue.default(0);\n  var evalNode = (0, _AnimatedCond.createAnimatedCond)(done, 0, (0, _AnimatedCall.createAnimatedCall)([node, (0, _AnimatedSet.createAnimatedSet)(done, 1)], function () {\n    callback && callback();\n\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = (0, _AnimatedAlways.createAnimatedAlways)(evalNode);\n\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"sources":["evaluateOnce.js"],"names":["input","Array","done","evalNode","cond","call","set","callback","i","alwaysNode","always"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AASO,SAAA,YAAA,CAAA,IAAA,EAAkD;AAAA,MAAtBA,KAAsB,uEAAlD,EAAkD;AAAA,MAAlD,QAAkD;;AACvD,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;AACzBD,IAAAA,KAAK,GAAG,CAARA,KAAQ,CAARA;AACD;;AACD,MAAME,IAAI,GAAG,IAAA,8BAAA,CAAb,CAAa,CAAb;AACA,MAAMC,QAAQ,GAAGC,sCAAI,IAAJA,EAAI,CAAJA,EAGfC,sCAAK,CAAA,IAAA,EAAOC,oCAAG,IAAHA,EAAR,CAAQA,CAAP,CAALD,EAA2B,YAAM;AAC/BE,IAAAA,QAAQ,IAAIA,QAAZA,EAAAA;;AACA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,KAAK,CAAzB,MAAA,EAAkCQ,CAAlC,EAAA,EAAuC;AACrCR,MAAAA,KAAK,CAALA,CAAK,CAALA,CAAAA,aAAAA,CAAAA,UAAAA;;AACAS,MAAAA,UAAU,CAAVA,QAAAA;AACD;AARL,GAGEJ,CAHeD,CAAjB;AAWA,MAAMK,UAAU,GAAGC,0CAAnB,QAAmBA,CAAnB;;AACA,OAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,KAAK,CAAzB,MAAA,EAAkCQ,CAAlC,EAAA,EAAuC;AACrCR,IAAAA,KAAK,CAALA,CAAK,CAALA,CAAAA,UAAAA,CAAAA,UAAAA;;AACAS,IAAAA,UAAU,CAAVA,QAAAA;AACD;AACF","sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}