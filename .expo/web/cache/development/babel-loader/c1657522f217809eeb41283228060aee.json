{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCode;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _base = require(\"../base\");\n\nfunction useCode(nodeFactory, dependencies) {\n  if (!(_react.default.useEffect instanceof Function)) return;\n\n  _react.default.useEffect(function () {\n    if (!(nodeFactory instanceof Function)) {\n      console.warn('useCode() first argument should be a function that returns an animation node.');\n      var _node = nodeFactory;\n\n      nodeFactory = function nodeFactory() {\n        return _node;\n      };\n    }\n\n    var node = nodeFactory();\n\n    if (node) {\n      if (node instanceof Array) node = (0, _base.block)(node);\n      var animatedAlways = (0, _base.always)(node);\n\n      animatedAlways.__attach();\n\n      return function () {\n        return animatedAlways.__detach();\n      };\n    }\n  }, dependencies);\n}","map":{"version":3,"sources":["useCode.js"],"names":["React","nodeFactory","console","node","block","animatedAlways","always"],"mappings":";;;;;;;AAAA;;AACA;;AAae,SAAA,OAAA,CAAA,WAAA,EAAA,YAAA,EAA4C;AACzD,MAAI,EAAEA,eAAAA,SAAAA,YAAN,QAAI,CAAJ,EAA4C;;AAE5CA,iBAAAA,SAAAA,CAAgB,YAAM;AAEpB,QAAI,EAAEC,WAAW,YAAjB,QAAI,CAAJ,EAAwC;AACtCC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,+EAAAA;AAIA,UAAMC,KAAI,GAAV,WAAA;;AACAF,MAAAA,WAAW,GAAG;AAAA,eAAdA,KAAc;AAAA,OAAdA;AACD;;AAED,QAAIE,IAAI,GAAGF,WAAX,EAAA;;AACA,QAAA,IAAA,EAAU;AAER,UAAIE,IAAI,YAAR,KAAA,EAA2BA,IAAI,GAAGC,iBAAPD,IAAOC,CAAPD;AAE3B,UAAME,cAAc,GAAGC,kBAAvB,IAAuBA,CAAvB;;AACAD,MAAAA,cAAc,CALN,QAKRA;;AAGA,aAAO;AAAA,eAAMA,cAAc,CAA3B,QAAaA,EAAN;AAAA,OAAP;AACD;AArBHL,GAAAA,EAAAA,YAAAA;AAuBD","sourcesContent":["import React from 'react';\nimport { always, block } from '../base';\n\n/**\n * @callback NodeFactory\n * Function to create a node or an array of nodes.\n * @returns {(Node[] | Node | null | undefined | Boolean)}\n */\n\n/**\n * React hook to run a node.\n * @param {NodeFactory} nodeFactory Function to build the node to run.\n * @param dependencies Array of dependencies. Refresh the node on changes.\n */\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n\n  React.useEffect(() => {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn(\n        'useCode() first argument should be a function that returns an animation node.'\n      );\n\n      const node = nodeFactory;\n      nodeFactory = () => node;\n    }\n\n    let node = nodeFactory();\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n\n      const animatedAlways = always(node);\n      animatedAlways.__attach();\n\n      // return undo function\n      return () => animatedAlways.__detach();\n    }\n  }, dependencies);\n}\n"]},"metadata":{},"sourceType":"script"}