{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _I18nManager = _interopRequireDefault(require(\"react-native-web/dist/exports/I18nManager\"));\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nvar _memoize = _interopRequireDefault(require(\"./memoize\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Easing = _reactNativeReanimated.EasingNode || _reactNativeReanimated.Easing;\nvar multiply = _reactNativeReanimated.default.multiply,\n    Extrapolate = _reactNativeReanimated.default.Extrapolate;\nvar interpolate = _reactNativeReanimated.default.interpolateNode || _reactNativeReanimated.default.interpolate;\n\nvar TabBarIndicator = function (_React$Component) {\n  (0, _inherits2.default)(TabBarIndicator, _React$Component);\n\n  var _super = _createSuper(TabBarIndicator);\n\n  function TabBarIndicator() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TabBarIndicator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"fadeInIndicator\", function () {\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          layout = _this$props.layout,\n          width = _this$props.width,\n          getTabWidth = _this$props.getTabWidth;\n\n      if (!_this.isIndicatorShown && width === 'auto' && layout.width && navigationState.routes.every(function (_, i) {\n        return getTabWidth(i);\n      })) {\n        _this.isIndicatorShown = true;\n\n        _reactNativeReanimated.default.timing(_this.opacity, {\n          duration: 150,\n          toValue: 1,\n          easing: Easing.in(Easing.linear)\n        }).start();\n      }\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"isIndicatorShown\", false);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"opacity\", new _reactNativeReanimated.default.Value(_this.props.width === 'auto' ? 0 : 1));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getTranslateX\", (0, _memoize.default)(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = routes.reduce(function (acc, _, i) {\n        if (i === 0) return [0];\n        return [].concat((0, _toConsumableArray2.default)(acc), [acc[i - 1] + getTabWidth(i - 1)]);\n      }, []);\n      var translateX = interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n      return multiply(translateX, _I18nManager.default.isRTL ? -1 : 1);\n    }));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getWidth\", (0, _memoize.default)(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = inputRange.map(getTabWidth);\n      return interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n    }));\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TabBarIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          position = _this$props2.position,\n          navigationState = _this$props2.navigationState,\n          getTabWidth = _this$props2.getTabWidth,\n          width = _this$props2.width,\n          style = _this$props2.style,\n          layout = _this$props2.layout;\n      var routes = navigationState.routes;\n      var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n      var indicatorWidth = width === 'auto' ? routes.length > 1 ? this.getWidth(position, routes, getTabWidth) : getTabWidth(0) : width;\n      return React.createElement(_reactNativeReanimated.default.View, {\n        style: [styles.indicator, {\n          width: indicatorWidth\n        }, layout.width ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : {\n          left: \"\".concat(100 / routes.length * navigationState.index, \"%\")\n        }, width === 'auto' ? {\n          opacity: this.opacity\n        } : null, style]\n      });\n    }\n  }]);\n  return TabBarIndicator;\n}(React.Component);\n\nexports.default = TabBarIndicator;\n\nvar styles = _StyleSheet.default.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["Easing","EasingNode","Extrapolate","interpolate","Animated","React","componentDidMount","componentDidUpdate","getTabWidth","width","layout","navigationState","duration","toValue","easing","memoize","inputRange","routes","outputRange","i","acc","translateX","extrapolate","CLAMP","multiply","I18nManager","render","indicatorWidth","styles","transform","left","opacity","indicator","backgroundColor","position","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nconst Easing = EasingNode || OldEasing;\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nconst { multiply, Extrapolate } = Animated;\n\n// @ts-ignore\nconst interpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        duration: 150,\n        toValue: 1,\n        easing: Easing.in(Easing.linear),\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n\n      // every index contains widths at all previous indices\n      const outputRange = routes.reduce<number[]>((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n\n      const translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }\n  );\n\n  private getWidth = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n    }\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const translateX =\n      routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n\n    const indicatorWidth =\n      width === 'auto'\n        ? routes.length > 1\n          ? this.getWidth(position, routes, getTabWidth)\n          : getTabWidth(0)\n        : width;\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          { width: indicatorWidth },\n          layout.width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}