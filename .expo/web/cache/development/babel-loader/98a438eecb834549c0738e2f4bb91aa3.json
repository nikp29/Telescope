{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _ScrollView = _interopRequireDefault(require(\"react-native-web/dist/exports/ScrollView\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _UploadForm = _interopRequireDefault(require(\"./../components/UploadForm\"));\n\nvar _navigationRef = require(\"../navigationRef\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _config = require(\"../firebase/config.js\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _youtube = _interopRequireDefault(require(\"../api/youtube.js\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/rithikpothuganti/Telescope-app/Telescope/src/screens/ReelUploadScreen.js\";\n\nvar ReelUploadScreen = function ReelUploadScreen() {\n  var _useState = (0, _react.useState)(\"\"),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  return _react.default.createElement(_View.default, {\n    style: styles.container,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_UploadForm.default, {\n    headerText: \"Upload Your Reel\",\n    errorMessage: error,\n    submitButtonText: \"Next\",\n    onSubmit: confirmUpload,\n    setError: setError,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar confirmUpload = function confirmUpload(_ref) {\n  var url, tags, setError, description, usersRef, uid;\n  return _regenerator.default.async(function confirmUpload$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          url = _ref.url, tags = _ref.tags, setError = _ref.setError, description = _ref.description;\n          usersRef = _config.firebase.firestore().collection(\"users\");\n          _context2.next = 4;\n          return _regenerator.default.awrap(_asyncStorage.default.getItem(\"token\"));\n\n        case 4:\n          uid = _context2.sent;\n          _context2.next = 7;\n          return _regenerator.default.awrap(usersRef.doc(uid).get().then(function _callee(firestoreDocument) {\n            var data, lastUploaded, current, response, thumbnail, _response, _thumbnail;\n\n            return _regenerator.default.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (firestoreDocument.exists) {\n                      _context.next = 3;\n                      break;\n                    }\n\n                    setError(\"Error getting user information\");\n                    return _context.abrupt(\"return\");\n\n                  case 3:\n                    data = firestoreDocument.data();\n\n                    if (!data.hasOwnProperty(\"lastUploaded\")) {\n                      _context.next = 17;\n                      break;\n                    }\n\n                    lastUploaded = data.lastUploaded;\n                    current = (0, _moment.default)().subtract(0, \"d\").unix().valueOf();\n\n                    if (!(current > lastUploaded)) {\n                      _context.next = 14;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return _regenerator.default.awrap(_youtube.default.get(\"/videos\", {\n                      params: {\n                        id: url\n                      }\n                    }));\n\n                  case 10:\n                    response = _context.sent;\n\n                    if (response && response.data.items[0]) {\n                      thumbnail = response.data.items[0].snippet.thumbnails.standard.url;\n                      setError(\"\");\n                      (0, _navigationRef.navigate)(\"ConfirmUpload\", {\n                        url: url,\n                        tags: tags,\n                        thumbnail: thumbnail,\n                        description: description,\n                        username: data.fullName,\n                        uid: uid\n                      });\n                    } else {\n                      setError(\"invalid youtube video\");\n                    }\n\n                    _context.next = 15;\n                    break;\n\n                  case 14:\n                    setError(\"You must wait 24 hours since your last post before posting a new reel\");\n\n                  case 15:\n                    _context.next = 21;\n                    break;\n\n                  case 17:\n                    _context.next = 19;\n                    return _regenerator.default.awrap(_youtube.default.get(\"/videos\", {\n                      params: {\n                        id: url\n                      }\n                    }));\n\n                  case 19:\n                    _response = _context.sent;\n\n                    if (_response && _response.data.items[0]) {\n                      _thumbnail = _response.data.items[0].snippet.thumbnails.standard.url;\n                      setError(\"\");\n                      (0, _navigationRef.navigate)(\"ConfirmUpload\", {\n                        url: url,\n                        tags: tags,\n                        thumbnail: _thumbnail,\n                        description: description,\n                        username: data.fullName,\n                        uid: uid\n                      });\n                    } else {\n                      setError(\"invalid youtube video\");\n                    }\n\n                  case 21:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).catch(function (error) {\n            setError(error.message);\n          }));\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nReelUploadScreen.navigationOptions = function () {\n  return {\n    header: function header() {\n      return false;\n    }\n  };\n};\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    justifyContent: \"center\",\n    marginBottom: 250,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"scroll\"\n  }\n});\n\nvar _default = ReelUploadScreen;\nexports.default = _default;","map":{"version":3,"sources":["/Users/rithikpothuganti/Telescope-app/Telescope/src/screens/ReelUploadScreen.js"],"names":["ReelUploadScreen","error","setError","styles","container","confirmUpload","url","tags","description","usersRef","firebase","firestore","collection","AsyncStorage","getItem","uid","doc","get","then","firestoreDocument","exists","data","hasOwnProperty","lastUploaded","current","subtract","unix","valueOf","youtubeApi","params","id","response","items","thumbnail","snippet","thumbnails","standard","username","fullName","catch","message","navigationOptions","header","StyleSheet","create","justifyContent","marginBottom","height","backgroundColor","flexDirection","alignItems","overflow"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { View, ScrollView, StyleSheet, Text } from \"react-native\";\nimport UploadForm from \"./../components/UploadForm\";\nimport { navigate } from \"../navigationRef\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { firebase } from \"../firebase/config.js\";\nimport moment from \"moment\";\nimport youtubeApi from \"../api/youtube.js\";\n\nconst ReelUploadScreen = () => {\n  const [error, setError] = useState(\"\");\n  return (\n    <View style={styles.container}>\n      <UploadForm\n        headerText=\"Upload Your Reel\"\n        errorMessage={error}\n        submitButtonText=\"Next\"\n        onSubmit={confirmUpload}\n        setError={setError}\n      />\n    </View>\n  );\n};\n\nconst confirmUpload = async ({ url, tags, setError, description }) => {\n  const usersRef = firebase.firestore().collection(\"users\");\n  const uid = await AsyncStorage.getItem(\"token\");\n  await usersRef\n    .doc(uid)\n    .get()\n    .then(async (firestoreDocument) => {\n      if (!firestoreDocument.exists) {\n        setError(\"Error getting user information\");\n        return;\n      }\n      const data = firestoreDocument.data();\n      if (data.hasOwnProperty(\"lastUploaded\")) {\n        // convert unix timestamp to moment\n        const lastUploaded = data.lastUploaded;\n        const current = moment().subtract(0, \"d\").unix().valueOf(); // limit 1 upload per day\n        if (current > lastUploaded) {\n          // if more than 24 hours has elapsed\n          const response = await youtubeApi.get(\"/videos\", {\n            params: { id: url },\n          });\n          if (response && response.data.items[0]) {\n            const thumbnail =\n              response.data.items[0].snippet.thumbnails.standard.url;\n            setError(\"\");\n            navigate(\"ConfirmUpload\", {\n              url,\n              tags,\n              thumbnail,\n              description,\n              username: data.fullName,\n              uid,\n            });\n          } else {\n            setError(\"invalid youtube video\");\n          }\n        } else {\n          setError(\n            \"You must wait 24 hours since your last post before posting a new reel\"\n          );\n        }\n      } else {\n        const response = await youtubeApi.get(\"/videos\", {\n          params: { id: url },\n        });\n        if (response && response.data.items[0]) {\n          const thumbnail =\n            response.data.items[0].snippet.thumbnails.standard.url;\n          setError(\"\");\n          navigate(\"ConfirmUpload\", {\n            url,\n            tags,\n            thumbnail,\n            description,\n            username: data.fullName,\n            uid,\n          });\n        } else {\n          setError(\"invalid youtube video\");\n        }\n      }\n    })\n    .catch((error) => {\n      setError(error.message);\n    });\n};\n\nReelUploadScreen.navigationOptions = () => {\n  return {\n    header: () => false,\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: \"center\",\n    marginBottom: 250,\n    height: \"100%\",\n    backgroundColor: \"white\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"scroll\",\n  },\n});\n\nexport default ReelUploadScreen;\n"]},"metadata":{},"sourceType":"script"}