{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedConcat = createAnimatedConcat;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _val = require(\"../val\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedConcat = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedConcat, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedConcat);\n\n  function AnimatedConcat(input) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedConcat);\n    (0, _invariant.default)(input.every(function (el) {\n      return el instanceof _AnimatedNode2.default || typeof el === 'number' || typeof el === 'string';\n    }), \"Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: \".concat(input));\n    _this = _super.call(this, {\n      type: 'concat',\n      input: input\n    }, input);\n    _this._input = input;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedConcat, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._input.reduce(function (prev, current) {\n        return prev + (0, _val.val)(current);\n      }, '');\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedConcat, id: \".concat(this.__nodeID);\n    }\n  }]);\n  return AnimatedConcat;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(_AnimatedBlock.adapt));\n}","map":{"version":3,"sources":["AnimatedConcat.js"],"names":["constructor","invariant","input","el","type","__onEvaluate","prev","val","toString","args"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAEA,c;;;;;AACEA,0BAAW,KAAXA,EAAmB;AAAA;;AAAA;AACjBC,4BACEC,KAAK,CAALA,KAAAA,CACEC,UAAAA,EAAE;AAAA,aACAA,EAAE,YAAFA,sBAAAA,IACA,OAAA,EAAA,KADAA,QAAAA,IAEA,OAAA,EAAA,KALG,QAEH;AAAA,KADJD,CADFD,EAAS,kJAAA,MAAA,CAATA,KAAS,CAATA;AASA,8BAAM;AAAEG,MAAAA,IAAI,EAAN,QAAA;AAAkBF,MAAAA,KAAAA,EAAAA;AAAlB,KAAN,EAAA,KAAA;AACA,UAAA,MAAA,GAAA,KAAA;AAXiB;AAYlB;;;;WAEDG,wBAAe;AACb,aAAO,KAAA,MAAA,CAAA,MAAA,CAAmB,UAAA,IAAA,EAAA,OAAA;AAAA,eAAmBC,IAAI,GAAGC,cAA7C,OAA6CA,CAA1B;AAAA,OAAnB,EAAP,EAAO,CAAP;AACD;;;WAEDC,oBAAW;AACT,aAAA,uBAAA,MAAA,CAA8B,KAA9B,QAAA,CAAA;AACD;;;EArBH,sB;;AAwBO,SAAA,oBAAA,GAAuC;AAAA,oCAAvC,IAAuC;AAAvC,IAAA,IAAuC;AAAA;;AAC5C,SAAO,IAAA,cAAA,CAAmBC,IAAI,CAAJA,GAAAA,CAA1B,oBAA0BA,CAAnB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"script"}