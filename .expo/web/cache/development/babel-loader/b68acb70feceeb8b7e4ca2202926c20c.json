{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.preventAutoHideAsync = preventAutoHideAsync;\nexports.hideAsync = hideAsync;\nexports.hide = hide;\nexports.preventAutoHide = preventAutoHide;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _ExpoSplashScreen = _interopRequireDefault(require(\"./ExpoSplashScreen\"));\n\nfunction preventAutoHideAsync() {\n  return _regenerator.default.async(function preventAutoHideAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (_ExpoSplashScreen.default.preventAutoHideAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('expo-splash-screen', 'preventAutoHideAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regenerator.default.awrap(_ExpoSplashScreen.default.preventAutoHideAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction hideAsync() {\n  return _regenerator.default.async(function hideAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (_ExpoSplashScreen.default.hideAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new _core.UnavailabilityError('expo-splash-screen', 'hideAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regenerator.default.awrap(_ExpoSplashScreen.default.hideAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction hide() {\n  console.warn('SplashScreen.hide() is deprecated in favour of SplashScreen.hideAsync()');\n  hideAsync();\n}\n\nfunction preventAutoHide() {\n  console.warn('SplashScreen.preventAutoHide() is deprecated in favour of SplashScreen.preventAutoHideAsync()');\n  preventAutoHideAsync();\n}","map":{"version":3,"sources":["../src/SplashScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAEA;;AAsBO,SAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,0BAAiB,oBADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,sBAA9C,CAFH;;AAAA;AAAA;AAAA,4CAIQ,0BAAiB,oBAAjB,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,0BAAiB,SADjB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,yBAAJ,CAAwB,oBAAxB,EAA8C,WAA9C,CAFH;;AAAA;AAAA;AAAA,4CAIQ,0BAAiB,SAAjB,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUD,SAAU,IAAV,GAAc;AAClB,EAAA,OAAO,CAAC,IAAR,CAAa,yEAAb;AACA,EAAA,SAAS;AACV;;AAKK,SAAU,eAAV,GAAyB;AAC7B,EAAA,OAAO,CAAC,IAAR,CACE,+FADF;AAGA,EAAA,oBAAoB;AACrB","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoSplashScreen from './ExpoSplashScreen';\n\n/**\n * Makes the native splash screen stay visible until `SplashScreen.hideAsync()` is called.\n * It has to be called before any view is rendered.\n *\n * @example\n * ```typescript\n * // top level component\n *\n * SplashScreen.preventAutoHideAsync()\n *  .then(result => console.log(`SplashScreen.preventAutoHideAsync() succeeded: ${result}`))\n *  .catch(console.warn); // it's good to explicitly catch and inspect any error\n *\n * class App extends React.Component {\n *   ...\n *   // Hide SplashScreen once your app content is ready to be displayed.\n *   await SplashScreen.hideAsync()\n *   ...\n * }\n * ```\n */\nexport async function preventAutoHideAsync(): Promise<boolean> {\n  if (!ExpoSplashScreen.preventAutoHideAsync) {\n    throw new UnavailabilityError('expo-splash-screen', 'preventAutoHideAsync');\n  }\n  return await ExpoSplashScreen.preventAutoHideAsync();\n}\n\nexport async function hideAsync(): Promise<boolean> {\n  if (!ExpoSplashScreen.hideAsync) {\n    throw new UnavailabilityError('expo-splash-screen', 'hideAsync');\n  }\n  return await ExpoSplashScreen.hideAsync();\n}\n\n/**\n * @deprecated Use `SplashScreen.hideAsync()` instead\n */\nexport function hide(): void {\n  console.warn('SplashScreen.hide() is deprecated in favour of SplashScreen.hideAsync()');\n  hideAsync();\n}\n\n/**\n * @deprecated Use `SplashScreen.preventAutoHideAsync()` instead\n */\nexport function preventAutoHide(): void {\n  console.warn(\n    'SplashScreen.preventAutoHide() is deprecated in favour of SplashScreen.preventAutoHideAsync()'\n  );\n  preventAutoHideAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}