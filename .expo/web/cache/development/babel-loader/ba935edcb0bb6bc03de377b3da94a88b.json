{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _base = require(\"./../base\");\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"./../core/InternalAnimatedValue\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction stiffnessFromOrigamiNode(oValue) {\n  return (0, _base.add)((0, _base.multiply)((0, _base.sub)(oValue, 30), 3.62), 194);\n}\n\nfunction dampingFromOrigamiNode(oValue) {\n  return (0, _base.add)((0, _base.multiply)((0, _base.sub)(oValue, 8), 3), 25);\n}\n\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  var tension = prevConfig.tension,\n      friction = prevConfig.friction,\n      rest = _objectWithoutProperties(prevConfig, [\"tension\", \"friction\"]);\n\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: typeof tension === 'number' ? stiffnessFromOrigamiValue(tension) : stiffnessFromOrigamiNode(tension),\n    damping: typeof friction === 'number' ? dampingFromOrigamiValue(friction) : dampingFromOrigamiNode(friction)\n  });\n}\n\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  var bounciness = prevConfig.bounciness,\n      speed = prevConfig.speed,\n      rest = _objectWithoutProperties(prevConfig, [\"bounciness\", \"speed\"]);\n\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\n\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (0, _base.divide)((0, _base.sub)(value, startValue), (0, _base.sub)(endValue, startValue));\n  }\n\n  function projectNormal(n, start, end) {\n    return (0, _base.add)(start, (0, _base.multiply)(n, (0, _base.sub)(end, start)));\n  }\n\n  function linearInterpolation(t, start, end) {\n    return (0, _base.add)((0, _base.multiply)(t, end), (0, _base.multiply)((0, _base.sub)(1, t), start));\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation((0, _base.sub)((0, _base.multiply)(2, t), (0, _base.multiply)(t, t)), start, end);\n  }\n\n  function b3Friction1(x) {\n    return (0, _base.add)((0, _base.sub)((0, _base.multiply)(0.0007, (0, _base.pow)(x, 3)), (0, _base.multiply)(0.031, (0, _base.pow)(x, 2))), (0, _base.multiply)(0.64, x), 1.28);\n  }\n\n  function b3Friction2(x) {\n    return (0, _base.add)((0, _base.sub)((0, _base.multiply)(0.000044, (0, _base.pow)(x, 3)), (0, _base.multiply)(0.006, (0, _base.pow)(x, 2))), (0, _base.multiply)(0.36, x), 2);\n  }\n\n  function b3Friction3(x) {\n    return (0, _base.add)((0, _base.sub)((0, _base.multiply)(0.00000045, (0, _base.pow)(x, 3)), (0, _base.multiply)(0.000332, (0, _base.pow)(x, 2))), (0, _base.multiply)(0.1078, x), 5.84);\n  }\n\n  function b3Nobounce(tension) {\n    return (0, _base.cond)((0, _base.lessOrEq)(tension, 18), b3Friction1(tension), (0, _base.cond)((0, _base.and)((0, _base.greaterThan)(tension, 18), (0, _base.lessOrEq)(tension, 44)), b3Friction2(tension), b3Friction3(tension)));\n  }\n\n  var b = normalize((0, _base.divide)(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize((0, _base.divide)(speed, 1.7), 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction)\n  });\n}\n\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  var b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(speed / 1.7, 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction)\n  });\n}\n\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new _InternalAnimatedValue.default(100),\n    mass: new _InternalAnimatedValue.default(1),\n    damping: new _InternalAnimatedValue.default(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new _InternalAnimatedValue.default(0)\n  };\n}\n\nvar _default = {\n  makeDefaultConfig: makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed: makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction: makeConfigFromOrigamiTensionAndFriction\n};\nexports.default = _default;","map":{"version":3,"sources":["SpringUtils.js"],"names":["oValue","add","multiply","sub","friction","stiffness","stiffnessFromOrigamiValue","stiffnessFromOrigamiNode","damping","dampingFromOrigamiValue","dampingFromOrigamiNode","speed","fromBouncinessAndSpeedNumbers","fromBouncinessAndSpeedNodes","divide","linearInterpolation","pow","cond","lessOrEq","b3Friction1","and","greaterThan","b3Friction2","b3Friction3","b","normalize","projectNormal","s","bouncyTension","bouncyFriction","quadraticOutInterpolation","b3Nobounce","value","endValue","start","n","end","t","Math","tension","bounciness","mass","overshootClamping","restSpeedThreshold","restDisplacementThreshold","toValue","makeDefaultConfig","makeConfigFromBouncinessAndSpeed","makeConfigFromOrigamiTensionAndFriction"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  pow,\n  lessOrEq,\n  and,\n  greaterThan,\n} from './../base';\nimport AnimatedValue from './../core/InternalAnimatedValue';\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction stiffnessFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 30), 3.62), 194);\n}\n\nfunction dampingFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 8), 3), 25);\n}\n\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  const { tension, friction, ...rest } = prevConfig;\n  return {\n    ...rest,\n    stiffness:\n      typeof tension === 'number'\n        ? stiffnessFromOrigamiValue(tension)\n        : stiffnessFromOrigamiNode(tension),\n    damping:\n      typeof friction === 'number'\n        ? dampingFromOrigamiValue(friction)\n        : dampingFromOrigamiNode(friction),\n  };\n}\n\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  const { bounciness, speed, ...rest } = prevConfig;\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\n\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return divide(sub(value, startValue), sub(endValue, startValue));\n  }\n\n  function projectNormal(n, start, end) {\n    return add(start, multiply(n, sub(end, start)));\n  }\n\n  function linearInterpolation(t, start, end) {\n    return add(multiply(t, end), multiply(sub(1, t), start));\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);\n  }\n\n  function b3Friction1(x) {\n    return add(\n      sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))),\n      multiply(0.64, x),\n      1.28\n    );\n  }\n\n  function b3Friction2(x) {\n    return add(\n      sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))),\n      multiply(0.36, x),\n      2\n    );\n  }\n\n  function b3Friction3(x) {\n    return add(\n      sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))),\n      multiply(0.1078, x),\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    return cond(\n      lessOrEq(tension, 18),\n      b3Friction1(tension),\n      cond(\n        and(greaterThan(tension, 18), lessOrEq(tension, 44)),\n        b3Friction2(tension),\n        b3Friction3(tension)\n      )\n    );\n  }\n\n  let b = normalize(divide(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(divide(speed, 1.7), 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction),\n  };\n}\n\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return (\n      0.00000045 * Math.pow(x, 3) -\n      0.000332 * Math.pow(x, 2) +\n      0.1078 * x +\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  let b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(speed / 1.7, 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction),\n  };\n}\n\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new AnimatedValue(100),\n    mass: new AnimatedValue(1),\n    damping: new AnimatedValue(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new AnimatedValue(0),\n  };\n}\n\nexport default {\n  makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction,\n};\n"]},"metadata":{},"sourceType":"script"}