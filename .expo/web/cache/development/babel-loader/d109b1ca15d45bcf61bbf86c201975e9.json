{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedDebug = createAnimatedDebug;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _NativeModules = _interopRequireDefault(require(\"react-native-web/dist/exports/NativeModules\"));\n\nvar _val = require(\"../val\");\n\nvar _AnimatedBlock = require(\"./AnimatedBlock\");\n\nvar _AnimatedCall = require(\"./AnimatedCall\");\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedDebug, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedDebug);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedDebug);\n    (0, _invariant.default)(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));\n    (0, _invariant.default)(value instanceof _AnimatedNode2.default, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_message\", void 0);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"_value\", void 0);\n\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = (0, _val.val)(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var _NativeModules$Native, _NativeModules$Native2, _NativeModules$Native3;\n\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = ((_NativeModules$Native = _NativeModules.default.NativeUnimoduleProxy) === null || _NativeModules$Native === void 0 ? void 0 : (_NativeModules$Native2 = _NativeModules$Native.modulesConstants) === null || _NativeModules$Native2 === void 0 ? void 0 : (_NativeModules$Native3 = _NativeModules$Native2.ExponentConstants) === null || _NativeModules$Native3 === void 0 ? void 0 : _NativeModules$Native3.executionEnvironment) === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return (0, _AnimatedBlock.createAnimatedBlock)([(0, _AnimatedCall.createAnimatedCall)([value], function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(\"\".concat(message, \" \").concat(a));\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, (0, _AnimatedBlock.adapt)(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["AnimatedDebug.js"],"names":["constructor","invariant","value","type","message","toString","__onEvaluate","val","console","runningInRemoteDebugger","runningInExpoShell","block","call","adapt"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;IAEA,a;;;;;AAIEA,yBAAW,OAAXA,EAAW,KAAXA,EAA4B;AAAA;;AAAA;AAC1BC,4BACE,OAAA,OAAA,KADO,QAATA,EAAS,mFAAA,MAAA,CAATA,OAAS,CAATA;AAIAA,4BACEC,KAAK,YADE,sBAATD,EAAS,0FAAA,MAAA,CAATA,KAAS,CAATA;AAIA,8BAAM;AAAEE,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,OAAjB,EAAiBA,OAAjB;AAA0BF,MAAAA,KAAAA,EAAAA;AAA1B,KAAN,EAAyC,CAAzC,KAAyC,CAAzC;;AAT0B,IAAA,eAAA,8CAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,8CAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAU1B,UAAA,QAAA,GAAA,OAAA;AACA,UAAA,MAAA,GAAA,KAAA;AAX0B;AAY3B;;;;WAEDG,oBAAW;AACT,aAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;;WAEDC,wBAAe;AACb,UAAMJ,KAAK,GAAGK,cAAI,KAAlB,MAAcA,CAAd;AACAC,MAAAA,OAAO,CAAPA,GAAAA,CAAY,KAAZA,QAAAA,EAAAA,KAAAA;AACA,aAAA,KAAA;AACD;;;EA1BH,sB;;AA6BO,SAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,EAA6C;AAClD,MAAA,OAAA,EAAa;AAAA,QAAA,qBAAA,EAAA,sBAAA,EAAA,sBAAA;;AAGX,QAAMC,uBAAuB,GAAG,OAAA,IAAA,KAHrB,WAGX;AAIA,QAAMC,kBAAkB,GACtB,CAAA,CAAA,qBAAA,GAAA,uBAAA,oBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,qBAAA,CAAA,gBAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,sBAAA,CAAA,iBAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,oBAAA,MADF,aAAA;;AAIA,QAAID,uBAAuB,IAA3B,kBAAA,EAAmD;AAGjD,aAAOE,wCAAM,CACXC,sCAAK,CAAD,KAAC,CAALA,EAAc;AAAA;AAAA,YAAA,CAAA;;AAAA,eAASJ,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CADZ,CACYA,CAAAA,CAAT;AAAA,OAAdI,CADW,EAAb,KAAa,CAAND,CAAP;AAHF,KAAA,MAOO;AACL,aAAO,IAAA,aAAA,CAAA,OAAA,EAA2BE,0BAAlC,KAAkCA,CAA3B,CAAP;AACD;AArB+C;;AAwBlD,SAAA,KAAA;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}